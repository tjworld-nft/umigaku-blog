---
import BaseLayout from '../layouts/BaseLayout.astro'
import { getPost, getPosts } from '../lib/sanityClient'
import { toHTML } from '@portabletext/to-html'
import { generateSEOData } from '../lib/seoGenerator'
import type { Post } from '../types/Post'

export async function getStaticPaths() {
  const posts = await getPosts()
  return posts.map((post: Post) => ({
    params: { slug: post.slug },
  }))
}

const { slug } = Astro.params

let post: Post | null = null
let error = ''

try {
  post = await getPost(slug)
  if (!post) {
    error = '記事が見つかりません'
  }
} catch (err) {
  error = '記事の取得に失敗しました'
  console.error('Error fetching post:', err)
}

// 画像URLを生成する関数
function getImageUrl(imageRef: string, projectId: string, dataset: string) {
  return `https://cdn.sanity.io/images/${projectId}/${dataset}/${imageRef.replace('image-', '').replace('-jpg', '.jpg').replace('-png', '.png').replace('-webp', '.webp')}`
}

// 日付フォーマット関数
function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

// Portable Text を HTML に変換
let bodyHTML = post?.body ? toHTML(post.body, {
  components: {
    types: {
      image: ({ value }) => {
        const imageUrl = getImageUrl(value.asset._ref, import.meta.env.SANITY_PROJECT_ID, import.meta.env.SANITY_DATASET)
        return `<img src="${imageUrl}" alt="${value.alt || ''}" class="w-full h-auto rounded-lg my-4" />`
      }
    }
  }
}) : ''

// 読みやすさのため、長い文章に改行を追加と「」問題の修正
if (bodyHTML) {
  bodyHTML = bodyHTML
    // 「」の前のあらゆる改行・空白パターンを削除
    .replace(/\s*<br\s*\/?>\s*<br\s*\/?>\s*」/g, '」')
    .replace(/\s*<br\s*\/?>\s*」/g, '」') 
    .replace(/\s*<\/p>\s*<p[^>]*>\s*」/g, '」')
    .replace(/([！？])\s*<\/p>\s*<p[^>]*>\s*」/g, '$1」')
    // h2のモダンなスタイリング
    .replace(/<h2>/g, '<h2 class="text-3xl font-bold mb-10 mt-16 text-gray-900 relative group">')
    .replace(/<\/h2>/g, '<span class="absolute -bottom-2 left-0 w-16 h-1 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full group-hover:w-24 transition-all duration-300"></span></h2>')
    // h3のモダンなスタイリング  
    .replace(/<h3>/g, '<h3 class="text-2xl font-semibold mb-6 mt-12 text-gray-800 relative group">')
    .replace(/<\/h3>/g, '<span class="absolute -bottom-1 left-0 w-12 h-0.5 bg-gradient-to-r from-teal-400 to-cyan-400 rounded-full group-hover:w-16 transition-all duration-300"></span></h3>')
    // 通常の改行処理
    .replace(/。\s*/g, '。<br><br>') // 句点の後に改行
    .replace(/！\s*/g, '！<br><br>') // 感嘆符の後に改行
    .replace(/？\s*/g, '？<br><br>') // 疑問符の後に改行
    .replace(/」\s*/g, '」<br><br>') // かぎ括弧閉じの後に改行
    .replace(/([。！？」])<br><br>(<\/p>)/g, '$1$2') // pタグ終了前の余分な改行を削除
}

// SEOデータを自動生成
const seoData = post ? generateSEOData(post.title, post.body || []) : null

const pageTitle = seoData ? seoData.ogTitle : '記事が見つかりません'
const pageDescription = seoData ? seoData.metaDescription : ''
const pageKeywords = seoData ? seoData.keywords.join(', ') : ''
const pageImage = post?.mainImage ? getImageUrl(post.mainImage.asset._ref, import.meta.env.SANITY_PROJECT_ID, import.meta.env.SANITY_DATASET) : undefined
---

<BaseLayout 
  title={pageTitle} 
  description={pageDescription}
  keywords={pageKeywords}
  image={pageImage}
  type="article"
  datePublished={post?.publishedAt || post?._createdAt}
  dateModified={post?._createdAt}
>
  {error || !post ? (
    <div class="text-center py-12">
      <p class="text-red-600 text-lg mb-4">{error || '記事が見つかりません'}</p>
      <a href="/blog/" class="text-blue-600 hover:underline">
        ホームに戻る
      </a>
    </div>
  ) : (
    <>
      <article class="article-card rounded-lg shadow-lg overflow-hidden">
        {post.mainImage && (
          <div class="aspect-video bg-gray-200">
            <img
              src={getImageUrl(post.mainImage.asset._ref, import.meta.env.SANITY_PROJECT_ID, import.meta.env.SANITY_DATASET)}
              alt={post.title}
              class="w-full h-full object-cover"
            />
          </div>
        )}
        
        <div class="p-8">
          <h1 class="text-4xl font-bold text-gray-900 mb-4">
            {post.title}
          </h1>
          
          <div class="flex items-center text-gray-600 text-sm mb-8">
            <time datetime={post.publishedAt || post._createdAt}>
              {formatDate(post.publishedAt || post._createdAt)}
            </time>
          </div>

          <div class="prose max-w-none mx-auto readable-content" set:html={bodyHTML}>
          </div>
        </div>
      </article>

      <div class="mt-8 text-center">
        <a
          href="/blog/"
          class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
        >
          記事一覧に戻る
        </a>
      </div>
    </>
  )}
</BaseLayout>

<style>
  /* 記事カードの背景 */
  .article-card {
    background: rgba(255,255,255,0.95) !important;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(173,216,230,0.4);
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  }

  /* 読みやすさを向上させた記事スタイル */
  .readable-content {
    font-size: 1.125rem;
    line-height: 1.8;
    color: #374151;
  }

  .readable-content p {
    margin-top: 1.8em;
    margin-bottom: 1.8em;
    line-height: 1.9;
    white-space: pre-line; /* 改行文字を反映 */
    color: #1f2937;
  }

  /* 句読点や「。」の後に改行スペースを追加 */
  .readable-content p::after {
    content: "";
    display: block;
    height: 0.8em;
  }

  .readable-content h1 {
    color: #111827 !important;
    font-weight: 800;
    font-size: 2.5rem;
    margin-top: 2.5em;
    margin-bottom: 1.2em;
    line-height: 1.3;
  }

  .readable-content h2 {
    color: #111827 !important;
    font-weight: 700;
    font-size: 1.8rem;
    margin-top: 3em;
    margin-bottom: 1.5em;
    line-height: 1.4;
    padding-top: 1em;
    border-top: 2px solid #e5e7eb;
  }

  .readable-content h3 {
    color: #111827 !important;
    font-weight: 600;
    font-size: 1.4rem;
    margin-top: 2.5em;
    margin-bottom: 1.2em;
    line-height: 1.5;
  }

  .readable-content h4, .readable-content h5, .readable-content h6 {
    color: #111827 !important;
    font-weight: 600;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.6;
  }

  .readable-content ul, .readable-content ol {
    margin-top: 1.8em;
    margin-bottom: 1.8em;
    padding-left: 1.5em;
  }

  .readable-content li {
    margin-top: 0.8em;
    margin-bottom: 0.8em;
    line-height: 1.8;
    color: #1f2937;
  }

  .readable-content blockquote {
    border-left: 4px solid #3b82f6;
    padding-left: 1.5em;
    margin: 2.5em 0;
    font-style: italic;
    background: #f8fafc;
    padding: 1.5em;
    border-radius: 8px;
    color: #475569;
  }

  .readable-content img {
    margin-top: 3em;
    margin-bottom: 3em;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.15);
  }

  .readable-content a {
    color: #2563eb !important;
    text-decoration: underline;
    text-underline-offset: 4px;
  }

  .readable-content a:hover {
    color: #1d4ed8 !important;
    text-decoration: none;
  }

  .readable-content code {
    background: #f1f5f9;
    color: #475569;
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-size: 0.9em;
  }

  .readable-content pre {
    background: #1e293b;
    color: #e2e8f0;
    padding: 1.5em;
    border-radius: 8px;
    margin: 2em 0;
    overflow-x: auto;
  }

  .readable-content strong, .readable-content b {
    font-weight: 700;
    color: #111827;
  }

  .readable-content em, .readable-content i {
    font-style: italic;
    color: #374151;
  }
</style>